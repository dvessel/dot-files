#compdef networksetup

# zsh completions for 'networksetup'
# automatically generated with http://github.com/RobSis/zsh-completion-generator
local arguments

arguments=(
  '-listnetworkserviceorder[displays a list of network services in the order they are]'
  '-listallnetworkservices[displays a list of all the network services on the servers]'
  '-listallhardwareports[displays list of hardware ports with corresponding device name]'
  '-detectnewhardware[detects new network hardware and creates a default network]'
  '-getmacaddress[displays ethernet (or Wi-Fi) address for hardwareport or device]'
  '-getcomputername[displays the computer name.]'
  '-setcomputername[sets computer name to <computername>.  This name is used by AFP.]'
  '-getinfo[displays the IP address, subnet mask, router, and hardware]'
  '-setmanual[ip subnet router]'
  '-setdhcp[\[clientid\]]'
  '-setbootp[use this command to set the TCP/IP configuration for the]'
  '-setmanualwithdhcprouter[ip]'
  '-getadditionalroutes[use this command to display the list of additional IPv4 routes]'
  '-setadditionalroutes[\[dest1 mask1 gate1\] \[dest2 mask2]'
  '-setv4off[use this command to turn IPv4 off on the specified]'
  '-setv6off[use this command to turn IPv6 off on the specified]'
  '-setv6automatic[use this command to set IPv6 to get its addresses automatically]'
  '-setv6linklocal[use this command to set IPv6 to only use link local for]'
  '-setv6manual[prefixlength router]'
  '-getv6additionalroutes[use this command to display the list of additional IPv6 routes]'
  '-setv6additionalroutes[\[dest1 prefixlength1 gate1\] \[dest2]'
  '-getdnsservers[displays DNS info for <networkservice>.]'
  '-setdnsservers[dns1 \[dns2\] \[...\]]'
  '-getsearchdomains[displays Domain Name info for <networkservice>.]'
  '-setsearchdomains[domain1 \[domain2\] \[...\]]'
  '-create6to4service[-<newnetworkservicename>]'
  '-set6to4automatic[-<newnetworkservicename>]'
  '-set6to4manual[-<newnetworkservicename> -<relayaddress>]'
  '-getwebproxy[displays Web proxy (server, port, enabled value) info for]'
  '-setwebproxy[domain portnumber authenticated username]'
  '-setwebproxystate[on | off]'
  '-getsecurewebproxy[displays Secure Web proxy (server, port, enabled value) info for]'
  '-setsecurewebproxy[domain portnumber authenticated]'
  '-setsecurewebproxystate[on | off]'
  '-getsocksfirewallproxy[displays SOCKS Firewall proxy (server, port, enabled value) info]'
  '-setsocksfirewallproxy[domain portnumber authenticated]'
  '-setsocksfirewallproxystate[on | off]'
  '-getproxybypassdomains[displays Bypass Domain Names for <networkservice>.]'
  '-setproxybypassdomains[domain1 \[domain2\] \[...\]]'
  '-getproxyautodiscovery[displays Proxy Auto Discover for <networkservice>.]'
  '-setproxyautodiscovery[on | off]'
  '-setautoproxyurl[url]'
  '-getautoproxyurl[displays proxy auto-config (url, enabled) info for]'
  '-setsocksfirewallproxystate[on | off]'
  '-getairportnetwork[displays current Wi-Fi Network.]'
  '-setairportnetwork[network \[password\]]'
  '-getairportpower[displays whether Wi-Fi power is on or off.]'
  '-setairportpower[on | off]'
  '-listpreferredwirelessnetworks[list the preferred wireless networks for <hardwareport>]'
  '-addpreferredwirelessnetworkatindex[network index]'
  '-removepreferredwirelessnetwork[network]'
  '-removeallpreferredwirelessnetworks[remove all networks from the preferred wireless network list for]'
  '-getnetworkserviceenabled[displays whether a service is on or off (enabled or disabled).]'
  '-setnetworkserviceenabled[on | off]'
  '-createnetworkservice[hardwareport]'
  '-renamenetworkservice[newnetworkservicename]'
  '-duplicatenetworkservice[newnetworkservicename]'
  '-removenetworkservice[use this command to delete a network service <networkservice>.]'
  '-setnetworkserviceenabled[.]'
  '-ordernetworkservices[1 \[service2\] \[service3\] \[...\]]'
  '-setMTUAndMediaAutomatically[set hardwareport or device specified back to automatically]'
  '-getMTU[get the MTU value for hardwareport or device specified.]'
  '-setMTU[value]'
  '-listValidMTURange[list the valid MTU range for hardwareport or device specified.]'
  '-getMedia[show both the current setting for media and the active media on]'
  '-setMedia[subtype \[option1\] \[option2\] \[...\]]'
  '-listValidMedia[list valid media options for hardwareport or device name.]'
  '-createVLAN[parentdevice tag]'
  '-deleteVLAN[parentdevice tag]'
  '-listVLANs[list the VLANs that have been created.]'
  '-listdevicesthatsupportVLAN[list the devices that support VLANs.]'
  '-isBondSupported[displays YES if the device can be added to a bond.  NO if it]'
  '-createBond[\[device1\] \[device2\] \[...\]]'
  '-deleteBond[delete the bond with the specified device-name.]'
  '-addDeviceToBond[bond]'
  '-removeDeviceFromBond[bond]'
  '-listBonds[list of all bonds.]'
  '-showBondStatus[display the status of the specified bond.]'
  '-listpppoeservices[list all PPPoE services in the current set.]'
  '-showpppoestatus[display the status of the PPPoE service with the specified name.]'
  '-createpppoeservice[name account password \[pppoeName\]]'
  '-deletepppoeservice[delete the service.]'
  '-setpppoeaccountname[account]'
  '-setpppoepassword[password]'
  '-connectpppoeservice[connect the service.]'
  '-disconnectpppoeservice[disconnect the service.]'
  '-listlocations[list all network locations.]'
  '-getcurrentlocation[display the name of the current set.]'
  '-createlocation[\[populate\]]'
  '-deletelocation[delete the set.]'
  '-switchtolocation[make the specified set the current set.]'
  '-version[displays version of networksetup tool.]'
  '-help[displays a list of all the commands available in the Network]'
  '-printcommands[displays a list of commands with no detail.]'
)

_arguments -s $arguments
