#!/usr/bin/env zsh

_brew_check tag libxmlb || return 1

function present-tags {
  typeset -a tags
  for t in $@; do
    t=${t/MAME /}
    case $t in
      Preliminary) tags+="\033[0;35m$t\033[0m" ;;
      BIOS)        tags+="\033[0;33m$t\033[0m" ;;
      Device)      tags+="\033[0;33m$t\033[0m" ;;
      Mechanical)  tags+="\033[0;34m$t\033[0m" ;;
      Incomplete)  tags+="\033[0;31m$t\033[0m" ;;
      \+*)         tags+="\033[0;32m$t\033[0m" ;;
      \-*)         tags+="\033[4;31m$t\033[0m" ;;
    esac
  done
  printf "${(j[,])tags}"
}

function mame-version {
  if type mame &>/dev/null; then
    local version=`mame -version`
    # Remove decimals and truncate. MAME version 0.250.0.1 results in 0250.
    print -- ${${${${version}/./}%%.*}%% *}
  else
    return 1
  fi
}

# 1 xpath query string
# 2 machine name, defaults to $CURRENT
function xpath-query {
  local result h=`md5 -qs "${2:-$CURRENT}/$1"`

  if [[ -f $hashdir/$h ]]; then
    cat $hashdir/$h
    return
  fi

  if result=`xb-tool query $xmlb "mame/machine[@name='${2:-$CURRENT}']" 1`; then
    # redirects to hash file and stdout. stderr goes nowhere but stderr.
    print -- ${result/RESULT:/} | xpath -q -n -e $1 >&1 >> $hashdir/$h
  elif [[ $result =~ "^no results" ]]; then
    f=( $scandir/${2:-$CURRENT}.(zip|7z|chd)(N.) )
    self-log warning "${2:-$CURRENT} was not recognized: ${(j[,])f}"
    return 1
  else
    self-log error "xb-tool query failed for ${2:-$CURRENT}"
    return 1
  fi
}

function xmlb-get {
  local work_path=$tempdir:h
  local xml_path=$work_path/mame${version}.xml
  local xmlb_path=$work_path/mame${version}.xmlb
  typeset -g xmlb=$xmlb_path

  [[ ! -f $xmlb_path ]] || return

  if [[ ! -f $xml_path ]]; then
    print "Getting xml file for ver.${version}…"
    if type mame &>/dev/null && [[ `mame-version` == $version ]]; then
      mame -listxml > $xml_path
    else
      local url=https://github.com/mamedev/mame/releases/download/mame${version}/mame${version}lx.zip
      local archive=$work_path/mame${version}lx.zip
      # Check for existing archive and make sure it's not corrupt.
      if test ! -f $archive || ! unzip -tqq $archive &>/dev/null; then
        if ! curl -o /dev/null --silent --head --fail $url || ! curl -#Lo $archive $url; then
          print "Failed to download 'mame${version}lx.zip'. Check version number and try again." >&2
          return 1
        fi
      fi
      unzip -oq $archive -d $work_path
    fi
  fi
  print "Compiling mame${version}.xmlb…\n"
  if xb-tool -t machine compile $xmlb_path $xml_path; then
    rm $xml_path
  else
    rm -f $xmlb_path
    print "Failed to compile mame${version}.xmlb." >&2
    return 1
  fi
}

function self-log {
  local category=$1; shift
  mkdir -p $tempdir/logs
  printf "%s %s %s\n" "`date -u +%Y-%m-%dT%H:%M:%SZ`" $category "$@" >> $tempdir/logs/$scanid.log
}

# Main #########################################################################

zparseopts -D -E -F - \
  {v,-version}:=version \
  {d,-dry-run}=dryrun || return 1

version=${${version[-1]/./}:-`mame-version`}
scandir=${${1:a}:-`eval print $(mame -showconfig|awk '$1=="rompath" {$1="";print $0}')`}
tempdir=${TMPDIR}oemame/cache-$version

if [[ ! -d $scandir ]]; then
  print "Scan directory does not exist:\n$scandir"  >&2
  return 1
else
  scanid=$scandir:t-`md5 -qs $scandir`
fi

if [[ -z $version ]]; then
  print "Could not determine MAME version. Use --version <number>" >&2
  return 1
fi

xmlb-get
[[ -f $xmlb ]] || return 1

infodir=$tempdir/info
# very expensive to build. needs work.
hashdir=$tempdir/hashes

mkdir -p $infodir $hashdir

for file in $scandir/*.(zip|7z|chd)(N.); do
  # CURRENT's scope extends to other functions.
  CURRENT=$file:t:r

  currentinfo=$infodir/$CURRENT.info
  if [[ ! -s $currentinfo ]]; then
    touch $currentinfo

    while read -r info; do
      # holds key:value. ignore empty values.
      if [[ -n ${info/*:} ]]; then
        print -- $info >> $currentinfo
      fi
    done < <(
      # status:good|imperfect|preliminary
      print -- status:`xpath-query "string(machine/driver/@status)"`
      # kind:bios|device|mechanical
      for kind in bios device mechanical; \
        (( `xpath-query "boolean(machine[@is$kind='yes'])"` )) && \
          print -- kind:$kind
      # get device dependencies. rom sha1 means it's been dumped.
      while read -r device; do
        (( `xpath-query "boolean(machine/rom/@sha1)" $device` )) && \
          print -- device:$device
      # awk removes attribute names. we only want unique values.
      done < <( xpath-query "machine/device_ref/@name" | awk -F\" '!x[$0]++ { print $2 }' )
      # get rom dependencies. clone->parent->bios
      romof=`xpath-query "string(machine/@romof)" $CURRENT`
      while [[ -n $romof ]]; do
        if (( `xpath-query "boolean(machine/rom/@sha1)" $romof` )); then
          print -- romof:$romof
        fi
        romof=`xpath-query "string(machine/@romof)" $romof`
      done
      # get dependent chd for CURRENT & PARENT.
      # all chd's must be placed in a folder named after the parent set.
      # there are some inconsistencies when allowing clone folder names.
      PARENT=`xpath-query "string(machine/@cloneof)" $CURRENT`
      base=${PARENT:-$CURRENT}
      for set in $CURRENT $PARENT; \
      while read -r disk; do
        # merge disks inherited from parent sets. ignore it to prevent duplicate entires.
        if ! (( `xpath-query "boolean(machine/disk/@merge)" $set` )); then
          print -- disk:$base/$disk
        fi
      done < <( xpath-query "machine/disk[@sha1]/@name" $set | awk -F\" '{ print $2 }' )
    )
  fi

  unset tags
  unset __files
  unset __incomplete

  typeset -a tags tagfilters=(
    "MAME Incomplete"
    "MAME Preliminary"
    "MAME BIOS"
    "MAME Device"
    "MAME Mechanical"
  )

  while read -r info; do
    case $info in
      status:preliminary) tags+="MAME Preliminary"  ;;
      kind:bios)          tags+="MAME BIOS"         ;;
      kind:device)        tags+="MAME Device"       ;;
      kind:mechanical)    tags+="MAME Mechanical"   ;;
      (device|romof|disk):*)
        dependency=${info/*:}
        case ${info/:*} in
          device|romof) __files=( $scandir/$dependency.(zip|7z)(N.) ) ;;
          disk)         __files=( $scandir/$dependency.chd(N.) )      ;;
        esac
        tagfilters+=( +$dependency -$dependency )
        if [[ -n $__files ]]; then
          tags+="+$dependency"
        else
          tags+="-$dependency"
          if [[ ! -v __incomplete ]]; then
            tags=( "MAME Incomplete" $tags )
            __incomplete=1
          fi
          self-log warning "$(
            printf "[%s] \"%s\" is missing %s [%s]\n" \
              $CURRENT "$( xpath-query "machine/description/text()" )" ${info/:*} $dependency
          )"
        fi
      ;;
    esac
  done < <( cat $infodir/$CURRENT.info )

  if [[ -n $tags ]]; then
    if [[ ! -n $dryrun ]]; then
      () {
        local IFS=$'\n' currenttags outsidetags rm ad
        # do not alter tags set outside of this script.
        currenttags=( `tag -gN $file` )
        outsidetags=( ${currenttags:|tagfilters} )
        rm=( `print -l -- ${currenttags:|outsidetags} | sort` )
        ad=( `print -l -- $tags | sort | uniq` )
        if [[ $rm != $ad ]]; then
          tag -r ${(j[,])rm} $file
          tag -a ${(j[,])tags} $file
        fi
      }
    fi
    printf "%-20s %s\n" $file:t "`present-tags $tags`"
  fi
done
