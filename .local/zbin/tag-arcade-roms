#!/usr/bin/env zsh

_brew_check tag libxmlb || return 1

function help {
cat <<EOF

Usage: $__self:t [options] [directory]
Scan ROMs and set tags based on MAME metadata.

Options:
  -v, --verify-dependencies Verify dependencies (BIOS, devices, etc.) are present
                            and prefix with '+' if it exists, '-' if it doesn't
                            'MAME Incomplete' is added if any are missing.
  -r, --reset-tags          Remove existing tags before applying new ones
                            Usually unnecessary unless you want to clear all tags
  -d, --dry-run             Show actions without modifying tags
  --version <version>       Specify MAME xml version (default: MAME's version)
  -h, --help                Show this help message

Directory:
  Path to scan for ROMs (default: MAME's configured rompath if available)

Dependencies:
  Requires the 'tag' utility (install with \`brew install tag\`)

Examples:
  $__self:t /path/to/roms     # Scan ROMs in specified directory
  $__self:t -d                # Dry-run using default directory
  $__self:t -vr roms          # Verify dependencies and reset tags

EOF
}

function main {

  zparseopts -D -E -F - \
    {v,-verify-dependencies}=verifydependencies \
    {r,-reset-tags}=resettags \
    {d,-dry-run}=dryrun \
    -version:=version \
    {h,-help}=help || {
      help; return 1
    }

  if (( #help )); then
    help; return
  fi

  if ! (( #1 )) && type mame >/dev/null; then
    scandir=`eval print $( mame -showconfig | awk '$1=="rompath" { $1=""; print $0 }')`
  fi
  scandir=${scandir:-${1:a}}
  version=${${version[-1]/./}:-`mame-version`}
  tempdir=${TMPDIR}oemame/cache-$version

  if ! (( #scandir )); then
    print "No scan directory specified." >&2
    return 1
  fi
  if [[ ! -d $scandir ]]; then
    print "Scan directory does not exist:\n$scandir"  >&2
    return 1
  fi
  if [[ -z $version ]]; then
    print "Could not determine MAME version. Use --version <number>" >&2
    return 1
  fi

  scanlog=$tempdir/scan.log
  infodir=$tempdir/info
  hashdir=$tempdir/hashes # TODO: very expensive to build. needs work.
  mkdir -p $scanlog:h $infodir $hashdir

  xmlb-get
  [[ -f $xmlb ]] || return 1

  self-log info "initiating scan:$scandir"

  local current{,file,info}

  for currentfile in $scandir/*.(zip|7z)(N); do
    # current's scope extends to other functions.
    current=$currentfile:t:r
    __current=$current

    currentinfo=$infodir/$current

    if [[ ! -s $currentinfo ]]; then

      if ! (( `xpath-query "boolean(machine/rom/@sha1)"` )); then
        self-log warning "$currentfile:t not recognized."
        continue
      fi

      touch $currentinfo
      self-log info \
        "Created new info file: [$current] \"`xpath-query "machine/description/text()"`\""

      while read -r info; do
        # holds key:value. ignore empty values.
        if [[ -n ${info/*:} ]]; then
          print -- $info >> $currentinfo
        fi
      done < <(
        while read -r info; do
          # omit unknown values.
          print -- ${info/&lt;unknown>}
        done < <(
          print -- description:`xpath-query "machine/description/text()"`
          print -- manufacturer:`xpath-query "machine/manufacturer/text()"`
          print -- year:`xpath-query "machine/year/text()"`
        )

        # status:good|imperfect|preliminary
        print -- status:`xpath-query "string(machine/driver/@status)"`

        # kind:bios|device|mechanical
        for kind in bios device mechanical; \
          (( `xpath-query "boolean(machine[@is$kind='yes'])"` )) && \
            print -- kind:$kind
        # kind to differentiate coin-operated machines, i.e., arcade machines.
        if (( `xpath-query "boolean(machine/input/@coins)"` )); then
          print -- kind:coinop
        fi

        # get device dependencies. rom sha1 means it's been dumped.
        while read -r device; do
          (( `xpath-query "boolean(machine/rom/@sha1)" $device` )) && \
            print -- device:$device
        # awk removes attribute names. we only want unique values.
        done < <( xpath-query "machine/device_ref/@name" | awk -F\" '!x[$0]++ { print $2 }' )

        # get rom dependencies. clone->parent->bios
        romof=`xpath-query "string(machine/@romof)" $current`
        while (( #romof )); do
          (( `xpath-query "boolean(machine/rom/@sha1)" $romof` )) && \
            print -- romof:$romof
          romof=`xpath-query "string(machine/@romof)" $romof`
        done

        # only two levels here. clone->parent
        parent=`xpath-query "string(machine/@cloneof)"`
        if (( #parent )); then
          print -- cloneof:$parent
        fi

        # dependent audio samples.
        sampleof=`xpath-query "string(machine/@sampleof)"`
        if (( #sampleof )); then
          print -- sampleof:$sampleof
        fi

        # get chd dependencies. clone chd->parent chd
        for set in $current $parent; while read -r disk; do
          # merge disks inherited from parent sets. ignore it to prevent duplicate entires.
          if ! (( `xpath-query "boolean(machine/disk[@name='$disk']/@merge)" $set` )); then
            print -- disk:$disk
          fi
        done < <( xpath-query "machine/disk[@sha1]/@name" $set | awk -F\" '{ print $2 }' )
      )
    fi

    unset description manufacturer year workstatus kind parent sample devices romof disks
    typeset -a kind devices romof parent sample disks

    while read -r info; do
      case $info in
        description:*)  description=${info#*:}  ;;
        manufacturer:*) manufacturer=${info#*:} ;;
        year:*)         year=${info#*:}         ;;
        status:*)       workstatus=${info#*:}   ;; # good|imperfect|preliminary
        kind:*)         kind+=(${info#*:})      ;; # bios|device|mechanical,coinop
        device:*)       devices+=(${info#*:})   ;;
        romof:*)        romof+=(${info#*:})     ;; # bios,parent
        cloneof:*)      parent=(${info#*:})     ;;
        sampleof:*)     sample=(${info#*:})     ;;
        disk:*)         disks+=(${info#*:})     ;;
      esac
    done < <( cat $currentinfo )

    typeset -U __tags=()

    tag-set status $workstatus
    tag-set kind $kind
    tag-set-dependencies device $devices
    tag-set-dependencies bios ${romof:|parent}
    tag-set-dependencies parent $parent
    tag-set-dependencies disk $disks
    tag-set-dependencies sample $sample

    if (( #__tags )); then
      (( #dryrun )) || tag-apply
      printf "%-20s %s\n" $currentfile:t "`present-tags $__tags`"
    fi
  done
}

function tag-set {
  local key=$1 value
  shift

  if [[ ! -v __ftags ]]; then
    typeset -gU __ftags=(
      "MAME Imperfect"
      "MAME Preliminary"
      "MAME BIOS"
      "MAME Device"
      "MAME Mechanical"
    )
  fi

  for value in $@; case $key:$value in
    status:imperfect)   __tags+="MAME Imperfect"  ;;
    status:preliminar)  __tags+="MAME Preliminary";;
    kind:bios)          __tags+="MAME BIOS"       ;;
    kind:device)        __tags+="MAME Device"     ;;
    kind:mechanical)    __tags+="MAME Mechanical" ;;
  esac
}

function tag-set-dependencies {
  local IFS=$'\n' kind=$1; shift
  typeset -aU exists missed dependencies=( $@ )

  (( #dependencies )) || return

  __ftags+=(
    "MAME Incomplete"
    `printf "+$kind:%s\n" $dependencies`
    `printf "-$kind:%s\n" $dependencies`
    `printf  "$kind:%s\n" $dependencies`
  )

  # not verified by default.
  if ! (( #verifydependencies )); then
    __tags+=( `printf "$kind:%s\n" $dependencies` )
    return
  fi

  # verify existance of dependencies
  case $kind in
    device|bios|parent)
      # eval to give $dependencies a chance to expand early.
      eval "exists=( $scandir:q/(${(j[|])dependencies}).(zip|7z)(N:t:r) )"
      missed=( ${dependencies:|exists} )
    ;;
    disk)
      # check both parent and clone if that relationship exists.
      eval "exists=( $scandir:q/($parent|$current)/(${(j[|])dependencies}).chd(N:t:r) )"
      missed=( ${dependencies:|exists} )
      # disk names with a comma are tagged with ':comma:' instead of a literal comma.
      # This is a limitation of the tag command. it's exceedingly rare but it's there.
      exists=( ${exists/,/:comma:} )
      missed=( ${missed/,/:comma:} )
    ;;
    sample)
      # sample location can vary. no existance check for now, maybe never.
      __tags+=( `printf "$kind:%s\n" $dependencies` )
      return
    ;;
  esac

  if (( #exists )); then
    __tags+=( `printf "+$kind:%s\n" $exists` )
  fi
  if (( #missed )); then
    __tags=( "MAME Incomplete" `printf "-$kind:%s\n" $missed` $__tags )
    self-log warning "[$__current] \"$description\" is missing $kind [${(j[,])missed}]."
  fi
}

function tag-apply {
  local IFS=$'\n'
  typeset -aU currenttags filetags

  currenttags=( `tag -gN $currentfile` )
  # when resetting, use all current tags.
  # otherwise, limit to tags set in __ftags.
  (( #resettags )) \
    && filetags=( $currenttags ) \
    || filetags=( ${currenttags:*__ftags} )
  # reset filters.
  unset __ftags

  # intersection ${__tags:*filetags} maintains order for comparison.
  if [[ ${__tags:*filetags} != $__tags ]]; then
    tag -r ${(j[,])filetags} $currentfile
    tag -a ${(j[,])__tags} $currentfile
    self-log info "[$current] \"$description\" was tagged [${(j[,])__tags}]."
  fi
}

function present-tags {
  typeset -aU tags

  for t in $@; do
    t=${t/MAME /}
    case $t in
      Incomplete)     tags+="\033[3;31m$t\033[0m" ;;
      Imperfect)      tags+="\033[3;35m$t\033[0m" ;;
      Preliminary)    tags+="\033[3;35m$t\033[0m" ;;
      BIOS)           tags+="\033[0;33m$t\033[0m" ;;
      Device)         tags+="\033[0;33m$t\033[0m" ;;
      Mechanical)     tags+="\033[0;33m$t\033[0m" ;;
      sample:*)       tags+="\033[0;36m${t/:*}:\033[0m${t/*:}" ;;
      \-*)            tags+="\033[4;31m$t\033[0m" ;;
      (\+|)bios:*)    tags+="\033[0;33m${t/:*}:\033[0m${t/*:}" ;;
      (\+|)device:*)  tags+="\033[0;33m${t/:*}:\033[0m${t/*:}" ;;
      (\+|)parent:*)  tags+="\033[0;34m${t/:*}:\033[0m${t/*:}" ;;
      (\+|)disk:*)    tags+="\033[0;36m${t/:*}:\033[0m${t/*:}" ;;
      *)              tags+="\033[4;30m$t\033[0m" ;;
    esac
  done
  printf "${(j[,])tags}"
}

function mame-version {
  if type mame &>/dev/null; then
    local version=`mame -version`
    # Remove decimals and truncate. MAME version 0.250.0.1 results in 0250.
    print -- ${${${${version}/./}%%.*}%% *}
  else
    return 1
  fi
}

# 1 xpath query string
# 2 machine name, defaults to $__current
function xpath-query {
  local result h=`md5 -qs "${2:-$__current}/$1"`

  if [[ -f $hashdir/$h ]]; then
    cat $hashdir/$h
    return
  fi

  if result=`xb-tool query $xmlb "mame/machine[@name='${2:-$__current}']" 1`; then
    # redirects to hash file and stdout. stderr goes nowhere but stderr.
    print -- ${result/RESULT:/} | xpath -q -n -e $1 >&1 >> $hashdir/$h
  elif [[ $result =~ "^no results" ]]; then
    f=( $scandir/${2:-$__current}.(zip|7z|chd)(N) )
    self-log warning "${2:-$__current} was not recognized: ${(j[,])f}"
    return 1
  else
    self-log error "xb-tool query failed for ${2:-$__current}"
    return 1
  fi
}

function xmlb-get {
  local work_path=$tempdir:h
  local xml_path=$work_path/mame${version}.xml
  local xmlb_path=$work_path/mame${version}.xmlb
  typeset -g xmlb=$xmlb_path

  [[ ! -f $xmlb_path ]] || return

  if [[ ! -f $xml_path ]]; then
    print "Getting xml file for ver.${version}…"
    if type mame &>/dev/null && [[ `mame-version` == $version ]]; then
      mame -listxml > $xml_path
    else
      local url=https://github.com/mamedev/mame/releases/download/mame${version}/mame${version}lx.zip
      local archive=$work_path/mame${version}lx.zip
      # Check for existing archive and make sure it's not corrupt.
      if test ! -f $archive || ! unzip -tqq $archive &>/dev/null; then
        if ! curl -o /dev/null --silent --head --fail $url || ! curl -#Lo $archive $url; then
          print "Failed to download 'mame${version}lx.zip'. Check version number and try again." >&2
          return 1
        fi
      fi
      unzip -oq $archive -d $work_path
    fi
  fi
  print "Compiling mame${version}.xmlb…\n"
  if xb-tool -t machine compile $xmlb_path $xml_path; then
    rm $xml_path
  else
    rm -f $xmlb_path
    print "Failed to compile mame${version}.xmlb." >&2
    return 1
  fi
}

function self-log {
  local category=$1; shift
  printf "%s\t%s\t%s\n" "`date -u +%Y-%m-%dT%H:%M:%SZ`" $category "$@" >> $scanlog
}

__self=`realpath $0`

main $@
