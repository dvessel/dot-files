#!/usr/bin/env zsh

_brew_check tag libxmlb || return 1

function main {

  zparseopts -D -E -F - \
    {v,-version}:=version \
    {d,-dry-run}=dryrun || return 1

  if test -z $1 && type mame >/dev/null; then
    scandir=`eval print $( mame -showconfig | awk '$1=="rompath" { $1=""; print $0 }')`
  fi
  scandir=${scandir:-${1:a}}
  version=${${version[-1]/./}:-`mame-version`}
  tempdir=${TMPDIR}oemame/cache-$version

  if [[ -z $scandir ]]; then
    print "No scan directory specified." >&2
    return 1
  fi
  if [[ ! -d $scandir ]]; then
    print "Scan directory does not exist:\n$scandir"  >&2
    return 1
  fi
  if [[ -z $version ]]; then
    print "Could not determine MAME version. Use --version <number>" >&2
    return 1
  fi

  scanlog=$tempdir/scan.log
  infodir=$tempdir/info
  hashdir=$tempdir/hashes # TODO: very expensive to build. needs work.
  mkdir -p $scanlog:h $infodir $hashdir

  xmlb-get
  [[ -f $xmlb ]] || return 1

  self-log info "initiating scan:$scandir"

  local current{,file,info}

  for currentfile in $scandir/*.(zip|7z)(N); do
    # current's scope extends to other functions.
    current=$currentfile:t:r
    __current=$current

    currentinfo=$infodir/$current

    if [[ ! -s $currentinfo ]]; then

      if ! (( `xpath-query "boolean(machine/rom/@sha1)"` )); then
        self-log warning "$currentfile:t not recognized."
        continue
      fi

      touch $currentinfo
      self-log info \
        "Created new info file: [$current] \"`xpath-query "machine/description/text()"`\""

      while read -r info; do
        # holds key:value. ignore empty values.
        if [[ -n ${info/*:} ]]; then
          print -- $info >> $currentinfo
        fi
      done < <(
        while read -r info; do
          # omit unknown values.
          print -- ${info/&lt;unknown>}
        done < <(
          print -- description:`xpath-query "machine/description/text()"`
          print -- manufacturer:`xpath-query "machine/manufacturer/text()"`
          print -- year:`xpath-query "machine/year/text()"`
        )

        # status:good|imperfect|preliminary
        print -- status:`xpath-query "string(machine/driver/@status)"`

        # kind:bios|device|mechanical
        for kind in bios device mechanical; \
          (( `xpath-query "boolean(machine[@is$kind='yes'])"` )) && \
            print -- kind:$kind

        # get device dependencies. rom sha1 means it's been dumped.
        while read -r device; do
          (( `xpath-query "boolean(machine/rom/@sha1)" $device` )) && \
            print -- device:$device
        # awk removes attribute names. we only want unique values.
        done < <( xpath-query "machine/device_ref/@name" | awk -F\" '!x[$0]++ { print $2 }' )

        # get rom dependencies. clone->parent->bios
        romof=`xpath-query "string(machine/@romof)" $current`
        while [[ -n $romof ]]; do
          (( `xpath-query "boolean(machine/rom/@sha1)" $romof` )) && \
            print -- romof:$romof
          romof=`xpath-query "string(machine/@romof)" $romof`
        done

        # only two levels here. clone->parent
        parent=`xpath-query "string(machine/@cloneof)"`
        if [[ -n $parent ]]; then
          print -- cloneof:$parent
        fi

        # get chd dependencies. clone chd->parent chd
        for set in $current $parent; while read -r disk; do
          # merge disks inherited from parent sets. ignore it to prevent duplicate entires.
          if ! (( `xpath-query "boolean(machine/disk/@merge)" $set` )); then
            print -- disk:$disk
          fi
        done < <( xpath-query "machine/disk[@sha1]/@name" $set | awk -F\" '{ print $2 }' )
      )
    fi

    unset {description,manufacturer,year,workstatus,kind,parent,devices,romof,disks}

    while read -r info; do
      case $info in
        description:*)  description=${info#*:}  ;;
        manufacturer:*) manufacturer=${info#*:} ;;
        year:*)         year=${info#*:}         ;;
        status:*)       workstatus=${info#*:}   ;;
        kind:*)         kind=${info#*:}         ;;
        cloneof:*)      parent=${info#*:}       ;;
        device:*)       devices+=( ${info#*:} ) ;;
        romof:*)        romof+=( ${info#*:} )   ;;
        disk:*)         disks+=( ${info#*:} )   ;;
      esac
    done < <( cat $currentinfo )

    local settags=() ftags=(
      "MAME Incomplete"
      "MAME Imperfect"
      "MAME Preliminary"
      "MAME BIOS"
      "MAME Device"
      "MAME Mechanical"
    )

    case $workstatus in
      good)                                     ;;
      imperfect)    settags+="MAME Imperfect"   ;;
      preliminary)  settags+="MAME Preliminary" ;;
    esac

    case $kind in
      bios)         settags+="MAME BIOS"        ;;
      device)       settags+="MAME Device"      ;;
      mechanical)   settags+="MAME Mechanical"  ;;
    esac

    for _type in device romof disk; do
      case $_type in
        device) dependencies=( $devices ) ;;
        romof)  dependencies=( $romof )   ;;
        disk)   dependencies=( $disks )   ;;
      esac

      for dependency in $dependencies; do
        case $_type in
          device)
            type=device
            __depexists=( $scandir/$dependency.(zip|7z)(N) )
          ;;
          romof)
            # romof is either a parent rom or bios.
            if [[ $dependency == $parent ]]; then
              type=parent
            else
              type=bios
            fi
            __depexists=( $scandir/$dependency.(zip|7z)(N) )
          ;;
          disk)
            type=disk
            # check both parent and clone if that relationship exists.
            __depexists=( $scandir/{$parent,$current}/$dependency.chd(N) )
            # disk names with a comma are tagged with ':comma:' instead of a literal comma.
            # This is a limitation of the tag command. it's exceedingly rare but it's there.
            dependency=${dependency/,/:comma:}
          ;;
        esac

        ftags+=( +$type:$dependency -$type:$dependency )
        if [[ ! -z $__depexists ]]; then
          settags+="+$type:$dependency"
        else
          settags=( "MAME Incomplete" -$type:$dependency $settags )
          self-log warning "[$current] \"$description\" is missing $type [$dependency]."
        fi
      done
    done

    if [[ -n $settags ]]; then
      [[ -n $dryrun ]] || set-tags
      printf "%-20s %s\n" $currentfile:t "`present-tags $settags`"
    fi
  done
}

# ignores tags set outside the scope of this script run.
function set-tags {
  local IFS=$'\n'
  typeset -gaU settags ftags

  currenttags=( `tag -gN $currentfile` )
  filetags=( ${currenttags:*ftags} )

  # intersection of settags and filetags compared with settags.
  if [[ ${settags:*filetags} != ${settags} ]]; then
    tag -r ${(j[,])filetags} $currentfile
    tag -a ${(j[,])settags} $currentfile
    self-log info "[$current] \"$description\" was tagged [${(j[,])settags}]."
  fi
}

function present-tags {
  typeset -a tags
  for t in $@; do
    t=${t/MAME /}
    case $t in
      Incomplete)  tags+="\033[3;31m$t\033[0m" ;;
      Imperfect)   tags+="\033[3;35m$t\033[0m" ;;
      Preliminary) tags+="\033[3;35m$t\033[0m" ;;
      BIOS)        tags+="\033[0;33m$t\033[0m" ;;
      Device)      tags+="\033[0;33m$t\033[0m" ;;
      Mechanical)  tags+="\033[0;33m$t\033[0m" ;;
      \-*)         tags+="\033[4;31m$t\033[0m" ;;
      \+bios:*)    tags+="\033[0;33m${t/:*}:\033[0m${t/*:}" ;;
      \+device:*)  tags+="\033[0;33m${t/:*}:\033[0m${t/*:}" ;;
      \+parent:*)  tags+="\033[0;34m${t/:*}:\033[0m${t/*:}" ;;
      \+disk:*)    tags+="\033[0;36m${t/:*}:\033[0m${t/*:}" ;;
    esac
  done
  printf "${(j[,])tags}"
}

function mame-version {
  if type mame &>/dev/null; then
    local version=`mame -version`
    # Remove decimals and truncate. MAME version 0.250.0.1 results in 0250.
    print -- ${${${${version}/./}%%.*}%% *}
  else
    return 1
  fi
}

# 1 xpath query string
# 2 machine name, defaults to $__current
function xpath-query {
  local result h=`md5 -qs "${2:-$__current}/$1"`

  if [[ -f $hashdir/$h ]]; then
    cat $hashdir/$h
    return
  fi

  if result=`xb-tool query $xmlb "mame/machine[@name='${2:-$__current}']" 1`; then
    # redirects to hash file and stdout. stderr goes nowhere but stderr.
    print -- ${result/RESULT:/} | xpath -q -n -e $1 >&1 >> $hashdir/$h
  elif [[ $result =~ "^no results" ]]; then
    f=( $scandir/${2:-$__current}.(zip|7z|chd)(N) )
    self-log warning "${2:-$__current} was not recognized: ${(j[,])f}"
    return 1
  else
    self-log error "xb-tool query failed for ${2:-$__current}"
    return 1
  fi
}

function xmlb-get {
  local work_path=$tempdir:h
  local xml_path=$work_path/mame${version}.xml
  local xmlb_path=$work_path/mame${version}.xmlb
  typeset -g xmlb=$xmlb_path

  [[ ! -f $xmlb_path ]] || return

  if [[ ! -f $xml_path ]]; then
    print "Getting xml file for ver.${version}…"
    if type mame &>/dev/null && [[ `mame-version` == $version ]]; then
      mame -listxml > $xml_path
    else
      local url=https://github.com/mamedev/mame/releases/download/mame${version}/mame${version}lx.zip
      local archive=$work_path/mame${version}lx.zip
      # Check for existing archive and make sure it's not corrupt.
      if test ! -f $archive || ! unzip -tqq $archive &>/dev/null; then
        if ! curl -o /dev/null --silent --head --fail $url || ! curl -#Lo $archive $url; then
          print "Failed to download 'mame${version}lx.zip'. Check version number and try again." >&2
          return 1
        fi
      fi
      unzip -oq $archive -d $work_path
    fi
  fi
  print "Compiling mame${version}.xmlb…\n"
  if xb-tool -t machine compile $xmlb_path $xml_path; then
    rm $xml_path
  else
    rm -f $xmlb_path
    print "Failed to compile mame${version}.xmlb." >&2
    return 1
  fi
}

function self-log {
  local category=$1; shift
  printf "%s\t%s\t%s\n" "`date -u +%Y-%m-%dT%H:%M:%SZ`" $category "$@" >> $scanlog
}

main $@
