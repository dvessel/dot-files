#!/usr/bin/env zsh

# - Make sure full disk access is enabled for the terminal app so
#   defaults can read from sandboxed apps and their containers.
# - Doesn't account for hosts or -currentHost. I have not run into a any
#   problems without it but there are some settings where it's needed.

# Tested on MacOS 13 Ventura.
# - Uses features in Zsh 5.8, installed with 11 Big Sur.
# - Uses features in plutil available in 10.2 Jaguar.

# $1 exit status
function s.help {
  cat <<- -----
backup,restore,list,delete  Manage defaults backups. Required action.
-a,--all                    Acts on all keys/domains from existing backups.
-s,--search <setting>       Search for matching keys in active settings.
                            Use to list/save keys not previously backed-up.
-g,-globalDomain            Global domain. Conflicts with -d.
-d,--domain <domain>        Target a domain, e.g., com.apple.finder. The flag
                            is optional. Domain can be positional just like the
                            defaults command.
-k,--key <setting>          Settings key to act on. The flag is optional. The
                            settings key can be positional just like the
                            defaults command. It is only required when omitting
                            the domain.
-p,--path <path>            Defaults to ~/.config/backup/defaults.
-h,--help                   Show help text.

Full Disk Access required for the terminal to access preferences in containers.
-----
  exit $1
}

# $1 domain
# $2 key
# $3 output 1 = domain or 2 = key
function op.backup {
  if ! s.sourceDomainExists $1; then
    print "? $1 - `s.error source domain does not exist!`" >&2
    return 1
  fi

  local value plist=$bdpath/$1.plist

  if value="`defaults export $1 - |
    plutil -extract "${2//\./\\.}" xml1 -o - -- - 2>/dev/null`"
  then
    if [[ ! -f $plist ]]; then
      plutil -create xml1 $plist
    fi
    # Escape dots or plutil will drill into submembers.
    if plutil -replace "${2//\./\\.}" -xml $value $plist; then
      print "  $@[$3] - `s.ok saved`"
      # Hold keys to list later. No other way to do it AFAIK.
      if ! plutil -type SettingsIndex $plist &>/dev/null; then
        plutil -insert SettingsIndex -array $plist
      fi
      if ! s.getSettingsIndex $1 | grep -qx $2; then
        plutil -insert SettingsIndex -string $2 -append $plist
      fi
    fi
  else
    print "? $@[$3] - `s.error source key does not exist!`" >&2
    return 1
  fi
}

# $1 domain
# $2 key
# $3 output 1 = domain or 2 = key
function op.restore {
  if ! s.sourceDomainExists $1; then
    print "? $1 - `s.warn restore target does not exist!`" >&2
    return 1
  fi

  local value

  if value=`plutil -extract "${2//\./\\.}" xml1 -o - $bdpath/$1.plist 2>/dev/null`
  then
    defaults write $1 $2 "$value" &&
      print "  $@[$3] - `s.ok restored`"
  else
    print "!!$@[$3] - `s.error failed reading backup!`" >&2
    return 1
  fi
}

# $1 domain
# $2 key
# $3 output 1 = domain or 2 = key
function op.delete {
  if l=`s.getSettingsIndex $1 | grep -nx $2`; then
    plutil -remove SettingsIndex.$((${l/:*} - 1)) $bdpath/$1.plist
    plutil -remove "${2//\./\\.}" $bdpath/$1.plist &&
      print "  $@[$3] - `s.ok deleted`"
  else
    print "!!$@[$3] - `s.error backup key does not exist!`" >&2
    return 1
  fi
  if [[ -z `s.getSettingsIndex $1` ]]; then
    rm $bdpath/$1.plist
  fi
}

# $1 domain
# $2 key
# $3 output 1 = domain or 2 = key
function op.list {
  print "  $@[$3]"
}

# $1 domain
# $2 key
function s.backupKeyExists {
  s.getSettingsIndex $1 | grep -qx $2
}

# $1 domain
function s.sourceDomainExists {
  typeset -g defaultsDomains
  if [[ -z $defaultsDomains ]]; then
    defaultsDomains="NSGlobalDomain\n`defaults domains | sed 's/, /\n/g'`"
  fi
  print $defaultsDomains | grep -qix $1
}

# $1 domain
function s.getSettingsIndex {
  c=`plutil -extract SettingsIndex raw $bdpath/$1.plist`
  if [[ $c > 0 ]]; then
    for n in {0..$((c-1))}; plutil -extract SettingsIndex.$n raw $bdpath/$1.plist
  fi
}

function s.getBackupDomains {
  for d in $bdpath/*.plist(N); print $d:r:t
}

function s.header {
  # Uppercase first character.
  printf "\e[1;15m%s\e[0m\n" "${(C)1::1}${1:1}"
}
function s.error {
  printf "\e[0;31m%s\e[0m" "${(j[ ])@}"
}
function s.ok {
  printf "\e[0;32m%s\e[0m" "${(j[ ])@}"
}
function s.warn {
  printf "\e[0;33m%s\e[0m" "${(j[ ])@}"
}

function {
  local op key domain search all help errmsg
  typeset -g bdpath

  zparseopts -D -E -F - \
    {a,-all}=all \
    {s,-search}:=search \
    {g,globalDomain,d:,-domain:}=domain \
    {k,-key}+:=key \
    {p,-path}:=bdpath \
    {h,-help}=help || s.help 1

  if [[ ${#@} > 0 ]]; then
    op=$1; shift
  fi
  if [[ -n $search ]]; then
    search=$search[-1]
  fi
  if [[ -n $domain ]]; then
    domain=${(@)domain:#(-d|--domain)}
  elif [[ ${#@} > 0 ]]; then
    domain=$1; shift
  fi
  if [[ -n $key ]]; then
    key=( "${(@)key:#(-k|--key)}" )
  elif [[ ${@} > 0 ]]; then
    key=$1; shift
  fi

  if [[ -n $help ]]; then
    s.help
  fi

  [[ $op != (backup|restore|list|delete) ]] && errmsg+=(
    "`s.error Required action was omitted.`"
  )
  [[ $op == (backup|restore|delete) && ! -n $key$domain$all$search ]] && errmsg+=(
    "`s.error $op requires a domain, key or --all.`"
  )
  [[ -n $search && $op == (restore|delete) ]] && errmsg+=(
    "`s.error Cannot $op with search.`"
  )
  [[ $op == list && -n $domain && -n $key ]] && errmsg+=(
    "`s.error Cannot list with $domain and $key!`"
  )
  [[ -n $domain && -n $all ]] && errmsg+=(
    "`s.error $all conflicts with domain: $domain`"
  )
  [[ ${#@} > 0 ]] && errmsg+=(
    "`s.error Unknown arguments: $@`"
  )

  bdpath=${bdpath[-1]:-~/.config/backup/defaults}
  if [[ ! -d $bdpath ]]; then
    case $op in
      backup)               mkdir -p $bdpath ;;
      restore|list|delete)  errmsg+=("`s.error No backups found in path: $bdpath`") ;;
    esac
  fi

  if [[ -n $errmsg ]]; then
    printf "%s\n" $errmsg
    s.help 1
  fi

  if ! plutil -lint /Library/Preferences/com.apple.TimeMachine.plist >/dev/null ; then
    s.warn This script requires your terminal app to have Full Disk Access.
  fi

  domain=${domain/-(globalDomain|g)/NSGlobalDomain}
  # Domains are case sensitive. Correct when possible.
  if test ! -z $domain && s.sourceDomainExists $domain; then
    if [[ $domain != `print $defaultsDomains | grep -ix $domain` ]]; then
      domain=`print $defaultsDomains | grep -ix $domain`
      print "`s.warn Domain is case sensitive. Using $domain.`"
    fi
  fi

  if [[ -n $search ]]; then

    s.header "Searching active domains for $search:"
    # [backup|list] from search.
    while read -r l; do
      if [[ $l =~ "^Found [0-9]+ keys in domain '([^']*)': {$" ]]; then
        _mdomain=${match[1]//Apple Global Domain/NSGlobalDomain}
        # domain filtering. Is case insensitive.
        if [[ -z $domain || $_mdomain:l == $domain:l ]]; then
          _matchhold=1
        fi
      # If previously matched a domain, verify it's for the right search key.
      elif [[ -n $_matchhold && $l =~ "^\"?$search\"? =" ]]; then
        op.$op $_mdomain $search 1
        unset _matchhold
      fi
    done < <( defaults find $search )

  else
    # [backup|restore|list|delete]
    # - specific key across all domains when --key is set but --domain is not.
    # - specific key in specific domain when --domain and --key is set.
    # - all keys within a domain when --domain is set but --key is not.
    # - all keys across all domains when --all is set.
    while read -r d; do
      while read -r k; do
        if [[ -n $domain && $domain != $d || -n $key && $key != $k ]]; then
          continue
        fi

        if [[ -n $key ]]; then
          test -z $_heademitted && s.header "$op domains for $key:"
          # list by domain.
          op.$op $d $k 1
        else
          test -z $_heademitted && s.header "$op $d:"
          # list by key.
          op.$op $d $k 2
        fi
        _heademitted=1

      done < <( [[ -n $key ]] && print $key || s.getSettingsIndex $d )
      test -z $key && unset _heademitted

    done < <( [[ -n $domain ]] && print $domain || s.getBackupDomains )

  fi
} $@
