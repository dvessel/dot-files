#!/usr/bin/env zsh

set -e

_brew_check fzf jq || return 1

# Set up possible first parameter commands.
cmds_any=(
  install info abv edit uses deps desc fetch cleanup options home homepage log
  audit cat formula livecheck style unbottled unpack
)
cmds_installed=(
  reinstall uninstall remove rm outdated upgrade postinstall missing
  list ls link ln unlink pin unpin migrate gist-logs bottle linkage test
  --prefix --cellar --cache
)
cmds=( $cmds_any $cmds_installed )

# Commands incompatible with casks.
cask_incompatible=(
  link ln unlink gist-logs migrate missing options bottle formula linkage test
  unbottled unpack --prefix --cellar
)
# Single select commands for fzf single select mode.
no_multi=( log gist-logs migrate )

# Either formula or cask. defaults to formula.
src=${argv[( $argv[(i)--cask] )]:---formula}
if [[ $src == --cask ]]; then
  cmds=( ${cmds:|cask_incompatible} )
fi

if (( $cmds[(I)$1] )); then
  # First argument is valid, pass in all of it.
  opts=( $@ )
elif [[ $1 =~ (--formula|--cask) && -z ${(@)argv:*cmds} || -z $@ ]]; then
  # First argument is --formula or --cask or no arguments.
  # Add default info command.
  opts=( info $@ )
elif [[ -n ${(@)argv:*cmds} ]]; then
  # Wrong order.
  printf "Did you mean \`%s\`?\n" "${(@)argv:*cmds} $src" >&2
  return 1
else
  printf "Supported \`%s\` commands:\n%s [See brew --help]\n" \
    "$src" "${(j[, ])cmds}" >&2
  return 1
fi

if [[ $src == --formula ]]; then
  names=`brew --cache`/api/formula_names
  descs=`brew --cache`/descriptions.json
elif [[ $src == --cask ]]; then
  names=`brew --cache`/api/cask_names
  descs=`brew --cache`/cask_descriptions.json
fi

# Update descriptions.json. It's not refreshed with new formulae/casks.
if [[ -f $names.last.txt && -f $names.txt ]]; then
  new_keys=( "${(@f)$(comm -1 -3 $names.last.txt $names.txt)}" )

  if [[ -n $new_keys ]]; then
    printf "%s\n" $new_keys > $names.new-`date +%s`.txt

    tmp=`mktemp`
    new_descs=`brew info --json=v2 $src $new_keys |
      jq -r --arg src "${${src/--formula/formulae}/--cask/casks}" \
        '.[$src].[].desc'`

    for ((i = 1; i <= $#new_keys; i++)); do
      jq  --arg nkey "$new_keys[$i]" \
          --arg desc "`printf "%s\n" $new_descs | sed $i!d`" \
          '.[$nkey] = $desc' $descs > $tmp && mv -f $tmp $descs
    done
  fi
fi
# If cache/api/*_names.txt doesn't exist, initialize with a light update.
if [[ ! -f $names.txt ]]; then
  brew update --auto-update
fi
cp -f $names.txt $names.last.txt

# Clear new entries older than 3 days.
for f in $names.new-*.txt(Nm+3); rm $f

if (( $cmds_any[(I)$opts[1]] )); then

  typeset -a reqs deps
  if [[ $src == --formula ]]; then
    reqs=( brew ls --installed-on-request )
    deps=( brew ls --installed-as-dependency )
  elif [[ $src == --cask ]]; then
    reqs=( `brew ls --cask` )
    deps=()
  fi

  typeset -a new
  for f in $names.new-*.txt(N); do
    new+=( "${(@f)$(cat $f)}" )
  done

  # this works around regex capture limits in sed. limit each loop to 100 names.
  local limit=100
  local maxcount=0 a=1 z=$limit
  for n in ${#reqs} ${#deps} ${#new}; do
    (( $n < $maxcount )) || maxcount=$n
  done

  lsdesc=`brew desc $src --eval-all --search ".+"`

  repeat `bc -le "ceil($(( $maxcount / $limit.0 )),0)"`; do
    lsdesc=`print -- $lsdesc | \
      sed -uE "s/^(${(j[|])deps[$a,$z]}):(.*)/\1:🌾 dependency.\2/" | \
      sed -uE "s/^(${(j[|])reqs[$a,$z]}):(.*)/\1:🍺 installed.\2/" | \
      sed -uE "s/^(${(j[|])new[$a,$z]}):(.*)/\1:⏰ new.\2/"`
    a=$(( $a + $limit )) z=$(( $z + $limit ))
  done

elif (( $cmds_installed[(I)$opts[1]] )); then
  if [[ $src == --formula ]]; then
    filter=`printf "%s|" $(brew leaves --installed-on-request)`
  else
    filter=`printf "%s|" $(brew list --full-name $src)`
  fi

  lsdesc=`brew desc --eval-all $src --name "/^($filter)$/"`
fi

sids=( `printf "%s\n" $lsdesc | fzf $((( $no_multi[(I)$opts[1]] )) || printf --multi) \
  --header-lines=1 --prompt="❯ brew $opts " | grep -oE "^[^:]+"` )

# TODO: save a history of selected id's to be recalled with different commands.
if [[ ! -z $sids ]]; then
  printf "\033[0;33m❯ brew %s %s\033[0m\n" "$opts" "$sids"
  brew $opts $sids
fi
